"""Example workflow for how to utilize `nbdev` for experimenting and exporting your module."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_workflow.ipynb.

# %% auto 0
__all__ = ['CatOrDogImageClassifier']

# %% ../nbs/02_workflow.ipynb 26
# Import from fastai
from fastai.vision.all import *

# %% ../nbs/02_workflow.ipynb 27
# Class for Cat/Dog image
class CatOrDogImageClassifier:
    "Classifier between cat and dog images"
    
    def __init__(
        self,
        arch=resnet34,  # Pretrained model architecture
        metrics=error_rate,  # Metrics to be used
    ):
        "Generate classifier from pretrained model"
    
        # Form dataset loader
        set_seed(99, True)
        path = untar_data(URLs.PETS)/'images'
        dls = ImageDataLoaders.from_name_func(
            path, get_image_files(path), valid_pct=0.2,
            label_func=lambda x: x[0].isupper(), item_tfms=Resize(224))

        # Create and fine-tune learner
        learner = vision_learner(dls, arch, metrics=metrics).to_fp16()
        learner.fine_tune(1)
        self.learner = learner
        
    def predict(self, file_path: str):
        "Predict a single image with the learner"

        # Extract prediction with learner
        img = PILImage.create(file_path)
        prediction = self.learner.predict(img)
        label = 'Cat' if prediction[0]=='True' else 'Dog'
        dog_prob = prediction[2][0].item()
        cat_prob = prediction[2][1].item()
        
        # Print the results
        print(f"The animal in this picture is: {label}")
        print(f"Probability of 'Dog': {dog_prob:.6f}")
        print(f"Probability of 'Cat': {cat_prob:.6f}")
        
        # Return the results
        return label, dog_prob, cat_prob

# %% ../nbs/02_workflow.ipynb 36
from fastai.vision.all import *

# %% ../nbs/02_workflow.ipynb 56
# Class for Cat/Dog image
class CatOrDogImageClassifier:
    "Classifier between cat and dog images"
    
    def __init__(
        self,
        arch=resnet34,  # Pretrained model architecture
        metrics=error_rate,  # Metrics to be used
    ):
        "Generate classifier from pretrained model"
    
        # Form dataset loader
        set_seed(99, True)
        path = untar_data(URLs.PETS)/'images'
        dls = ImageDataLoaders.from_name_func(
            path, get_image_files(path), valid_pct=0.2,
            label_func=lambda x: x[0].isupper(), item_tfms=Resize(224))

        # Create and fine-tune learner
        learner = vision_learner(dls, arch, metrics=metrics).to_fp16()
        learner.fine_tune(1)
        self.learner = learner
        
    def predict(self, file_path: str):
        "Predict a single image with the learner"

        # Extract prediction with learner
        img = PILImage.create(file_path)
        prediction = self.learner.predict(img)
        label = 'Cat' if prediction[0]=='True' else 'Dog'
        dog_prob = prediction[2][0].item()
        cat_prob = prediction[2][1].item()
        
        # Print the results
        print(f"The animal in this picture is: {label}")
        print(f"Probability of 'Dog': {dog_prob:.6f}")
        print(f"Probability of 'Cat': {cat_prob:.6f}")
        
        # Return the results
        return label, dog_prob, cat_prob
